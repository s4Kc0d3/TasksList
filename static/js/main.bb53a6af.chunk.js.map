{"version":3,"sources":["components/TaskCreator.jsx","components/TaskRow.jsx","components/TaskTable.jsx","components/VisibilityControl.jsx","components/Container.jsx","App.js","reportWebVitals.js","index.js"],"names":["TaskCreator","props","_useState","useState","_useState2","Object","slicedToArray","newTaskName","setNewTaskName","react_default","a","createElement","react","onSubmit","e","preventDefault","createNewTask","className","type","placeholder","value","onChange","target","TaskRow","_ref","task","toggleTask","key","name","checked","done","TaskTable","doneValue","tasks","_ref$showCompleted","showCompleted","filter","map","TaskRow_TaskRow","VisibilityControl","setShowCompleted","cleanTasks","isChecked","onClick","window","confirm","Container","children","App","tasksItems","setTasksItems","_useState3","_useState4","t","objectSpread","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","Container_Container","TaskCreator_TaskCreator","taskName","find","alert","concat","toConsumableArray","TaskTable_TaskTable","VisibilityControl_VisibilityControl","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.bb53a6af.chunk.js","sourcesContent":["import React, { useState, Fragment } from 'react'\r\n\r\nexport const TaskCreator = (props) => {\r\n    \r\n    const [newTaskName, setNewTaskName] = useState('')\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        props.createNewTask(newTaskName);\r\n        //localStorage.setItem('tasks', newTaskName);\r\n        setNewTaskName('');\r\n    };\r\n\r\n  return (\r\n    <Fragment>\r\n        <form onSubmit={handleSubmit} className=\"my-2 row\">\r\n            <div className=\"col-md-9\">\r\n              <input \r\n                type=\"text\" \r\n                placeholder=\"Enter a new task\"\r\n                value={newTaskName}\r\n                onChange={(e) => setNewTaskName(e.target.value)}\r\n                className=\"form-control\" \r\n              />\r\n            </div>\r\n            <div className=\"col-3\">\r\n              <button className=\"btn btn-primary btn-sm\">Save Task</button>\r\n            </div>  \r\n        </form>\r\n    </Fragment>\r\n  )\r\n}\r\n","import React, {Fragment} from 'react'\r\n\r\nexport const TaskRow = ({task, toggleTask}) => {\r\n    return (\r\n        <Fragment>\r\n            <tr key={task.name}>\r\n                <td className='d-flex justify-content-between'>\r\n                    {task.name}\r\n                    <input type=\"checkbox\"\r\n                        checked={task.done}\r\n                        onChange={() => toggleTask(task)}\r\n                    />\r\n                </td>\r\n            </tr>\r\n        </Fragment>\r\n    )\r\n}\r\n","import React, {Fragment} from 'react'\r\nimport { TaskRow } from './TaskRow';\r\n\r\nexport const TaskTable = ({tasks, toggleTask, showCompleted = false}) => {\r\n\r\n    const taskTableRows = (doneValue) => {\r\n        \r\n        return (\r\n        tasks\r\n        .filter(task => task.done === doneValue)\r\n        .map(task => (\r\n            <TaskRow task={task} key={task.name} toggleTask={toggleTask} /> \r\n         ))\r\n        )\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <table className=\"table table-dark table-striped table-bordered border-secondary\">\r\n                <thead>\r\n                    <tr className=\"table-primary\">\r\n                        <th>Tasks</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                      taskTableRows(showCompleted)  \r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </Fragment>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const VisibilityControl = ({ setShowCompleted, cleanTasks, isChecked }) => {\r\n\r\n    const handleDelete = () => {\r\n        if (window.confirm(\"Are you sure you want to delete it?\")) {\r\n            cleanTasks();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex justify-content-between bg-secondary text-white text-center p-2 border-secondary\">\r\n            <div className='form-check form-switch'>\r\n                <input \r\n                    className='form-check-input'\r\n                    type=\"checkbox\" \r\n                    checked={isChecked} \r\n                    onChange={e => setShowCompleted(e.target.checked)} \r\n                />\r\n                <label>Show Tasks Done</label>\r\n            </div>\r\n            <button onClick={handleDelete} className=\"btn btn-danger btn-sm\">\r\n                Clear\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const Container = ({ children }) => {\r\n    return (\r\n        <div className=\"container p-4\">\r\n            <div className=\"col-md-4 offset-md-4\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","//import { Paper, TextField, Button } from '@mui/material';\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\n// Components\nimport { TaskCreator } from './components/TaskCreator';\nimport { TaskTable } from './components/TaskTable';\nimport { VisibilityControl } from './components/VisibilityControl';\nimport { Container } from './components/Container';\n\n\n\nfunction App() {\n\n  const [tasksItems, setTasksItems] = useState([]);\n  const [showCompleted, setShowCompleted] = useState(false);\n\n  const createNewTask = (taskName) => {\n    if (!tasksItems.find(task => task.name === taskName)) {\n      //alert(`Creating taskname: ${taskName}`);\n      setTasksItems([...tasksItems, { name: taskName, done: false }]);\n    } else {\n      alert(`Taskname ${taskName} already exist.`);\n    }\n  };\n\n  const toggleTask = task => {\n    setTasksItems(\n      tasksItems.map(t => (t.name === task.name) ? { ...t, done: !t.done } : t)\n    );\n  };\n\n\n  useEffect(() => {\n    let data = localStorage.getItem('tasks');\n    if (data) {\n      setTasksItems(JSON.parse(data));\n    }\n  }, []);\n\n  const cleanTasks = () => {\n    setTasksItems(tasksItems.filter(task => !task.done));\n    setShowCompleted(false);\n  }\n\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasksItems));\n  }, [tasksItems]);\n\n  return (\n    <main className=\"bg-dark vh-100 text-white\">\n      <Container>\n        <TaskCreator createNewTask={createNewTask} />\n        <TaskTable tasks={tasksItems} toggleTask={toggleTask} />\n\n        <VisibilityControl\n          isChecked={showCompleted}\n          setShowCompleted={(checked) => setShowCompleted(checked)}\n          cleanTasks={cleanTasks}\n        />\n        {\n          showCompleted && (\n            <TaskTable tasks={tasksItems} toggleTask={toggleTask} showCompleted={showCompleted} />\n          )\n        }   \n      </Container>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  //<React.StrictMode>\n    <App />\n  //</React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}